version: "3.8"

services:
  # API Gateway - Custom Gateway thay tháº¿ Kong
#   api-gateway:
#     build:
#       context: .
#       dockerfile: ./api-gateway/Dockerfile.dev
#     ports:
#       - "8080:8080"
#     env_file:
#       - ./api-gateway/.env
#     volumes:
#       - ./api-gateway:/app/api-gateway:cached
#  # - ./go.mod:/app/go.mod:ro
#       # - ./go.sum:/app/go.sum:ro
#     depends_on:
#       - auth-service
#       - product-service
#       - cart-service
#       - order-service
#       - search-service
#     networks:
#       - default    
#     logging:
#       driver: "json-file"
#       options:
#         max-size: "10m"
#         max-file: "3"
#     command: ["air", "-c", ".air.toml"]

  traefik:
    image: traefik:v3.5
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--experimental.plugins.jwt-validator.modulename=github.com/Dattt2k2/golang-project/jwt-validator"
      - "--experimental.plugins.jwt-validator.version=v0.1.0"
    ports:
      - "80:80"
      - "443:443"
      - "8085:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik-config:/etc/traefik/dynamic:ro" 
      - "./traefik-plugins:/plugins-local"
    networks:
      - traefik-net

  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile.dev
    ports:
      - "8081:8081"
    env_file:
      - ./auth-service/.env
    volumes:
      - ./auth-service:/app/auth-service:cached
 # - ./go.mod:/app/go.mod:ro
      # - ./go.sum:/app/go.sum:ro
    depends_on:
      - postgres-auth
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=Host(`api.example.com`) && PathPrefix(`/auth`)"
      - "traefik.http.services.auth-service.loadbalancer.server.port=8081"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"  
    command: ["air", "-c", ".air.toml"]

  user-service: 
    build:
      context: .
      dockerfile: ./user-service/Dockerfile.dev
    ports:
      - "8095:8095"
    env_file:
      - ./user-service/.env
    volumes:
      - ./user-service:/app/user-service:cached
      - ./module:/app/module:cached
    depends_on:
      - kafka
      - postgres-user
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-service.rule=Host(`api.example.com`) && PathPrefix(`/user`)"
      - "traefik.http.services.user-service.loadbalancer.server.port=8095"
      - "traefik.http.routers.user-service.middlewares=jwt-validation"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"  
    command: ["air", "-c", ".air.toml"]
  product-service:
    build:
      context: .
      dockerfile: ./product-service/Dockerfile.dev
    ports:
      - "8082:8082"
    env_file:
      - ./product-service/.env
    volumes:
      - ./product-service:/app/product-service:cached
      - ./module:/app/module:cached
 # - ./go.mod:/app/go.mod:ro
      # - ./go.sum:/app/go.sum:ro
      # Mount uploads directory for file handling
      - ./product-service/uploads:/app/product-service/uploads
    depends_on:
      - kafka
      - redis
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.product-public.rule=Host(`api.example.com`) && PathPrefix(`/products/get`)"
      - "traefik.http.routers.product-public.priority=100" 
      - "traefik.http.routers.product-public.middlewares=" 
      - "traefik.http.routers.product-by-id.rule=Host(`api.example.com`) && PathPrefix(`/products/`) && Path(`/products/{id:[0-9]+}`)"
      - "traefik.http.routers.product-by-id.priority=100"
      - "traefik.http.routers.product-by-id.middlewares="
      - "traefik.http.routers.product-service.rule=Host(`api.example.com`) && PathPrefix(`/products`)"
      - "traefik.http.routers.product-service.middlewares=jwt-validation"
      - "traefik.http.services.product-service.loadbalancer.server.port=8082"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: ["air", "-c", ".air.toml"]
  cart-service:
    build:
      context: .
      dockerfile: ./cart-service/Dockerfile.dev
    ports:
      - "8083:8083"
      - "8090:8090"
    env_file:
      - ./cart-service/.env
    volumes:
      - ./cart-service:/app/cart-service:cached
      - ./module:/app/module:cached
      # - ./go.mod:/app/go.mod:ro
      # - ./go.sum:/app/go.sum:ro
    depends_on:
      - kafka
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cart-service.rule=Host(`api.example.com`) && PathPrefix(`/cart`)"
      - "traefik.http.services.cart-service.loadbalancer.server.port=8083"
      - "traefik.http.routers.cart-service.middlewares=jwt-validation"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: ["air", "-c", ".air.toml"]
  order-service:
    build:
      context: .
      dockerfile: ./order-service/Dockerfile.dev
    ports:
      - "8084:8084"
    env_file:
      - ./order-service/.env
    volumes:
      - ./order-service:/app/order-service:cached
      - ./module:/app/module:cached
 # - ./go.mod:/app/go.mod:ro
      # - ./go.sum:/app/go.sum:ro
    depends_on:
      - kafka
      - postgres-order
  # Database variables are provided via env files (./order-service/.env and ./.env)
    networks:
      - traefik-net
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.cart-service.rule=Host(`api.example.com`) && PathPrefix(`/cart`)"
    - "traefik.http.services.cart-service.loadbalancer.server.port=8084"
    - "traefik.http.routers.cart-service.middlewares=jwt-validation"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: ["air", "-c", ".air.toml"]
  search-service:
    build:
      context: .
      dockerfile: ./search-service/Dockerfile.dev
    ports:
      - "8086:8086"
    env_file:
      - ./search-service/.env
    volumes:
      - ./search-service:/app/search-service:cached
 # - ./go.mod:/app/go.mod:ro
      # - ./go.sum:/app/go.sum:ro
    depends_on:
      - kafka
      - elasticsearch
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.search-service.rule=Host(`api.example.com`) && PathPrefix(`/search`)"
      - "traefik.http.services.search-service.loadbalancer.server.port=8086"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: ["air", "-c", ".air.toml"]
  email-service:
    build:
      context: .
      dockerfile: ./email-service/Dockerfile.dev
    env_file:
      - ./email-service/.env
    ports:
      - "8087:8087"
    volumes:
      - ./email-service:/app/email-service:cached
 # - ./go.mod:/app/go.mod:ro
      # - ./go.sum:/app/go.sum:ro
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.email-service.rule=Host(`api.example.com`) && PathPrefix(`/email`)"
      - "traefik.http.services.email-service.loadbalancer.server.port=8087"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: ["air", "-c", ".air.toml"]
  
  review-service:
    build:
      context: .
      dockerfile: ./review-service/Dockerfile.dev
    container_name: review-service
    ports:
      - "8089:8089"
    env_file:
      - ./review-service/.env
    volumes:
      - ./review-service:/app/review-service:cached
    depends_on:
      - kafka
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
   
      - "traefik.http.routers.review-public.rule=Host(`api.example.com`) && PathPrefix(`/reviews/`) && Path(`/reviews/{id:[0-9]+}`)"
      - "traefik.http.routers.review-public.priority=100"
      - "traefik.http.routers.review-public.middlewares=" 

     
      - "traefik.http.routers.review-service.rule=Host(`api.example.com`) && PathPrefix(`/reviews`)"
      - "traefik.http.routers.review-service.middlewares=jwt-validation"
      - "traefik.http.services.review-service.loadbalancer.server.port=8089"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: ["air", "-c", ".air.toml"]
  payment-service:
    build:
      context: .
      dockerfile: ./payment-service/dockerfile.dev
    ports:
      - "8088:8088"
    depends_on:
      - postgres-payment
    env_file:
      - ./.env
    environment:
      # Non-DB variables remain; DB variables are loaded from ./.env or service env file
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      PORT: ${PORT}
      PAYMENT_GATEWAY_URL: ${PAYMENT_GATEWAY_URL}
      PAYMENT_GATEWAY_KEY: ${PAYMENT_GATEWAY_KEY}
      PAYMENT_GATEWAY_SECRET: ${PAYMENT_GATEWAY_SECRET}
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.payment-service.rule=Host(`api.example.com`) && PathPrefix(`/payments`)"
      - "traefik.http.services.payment-service.loadbalancer.server.port=8088"
      - "traefik.http.routers.payment-service.middlewares=jwt-validation"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: ["air", "-c", ".air.toml"]
    volumes:
      - ./payment-service:/app/payment-service:cached

  # db:
  #   image: postgres:16
  #   env_file:
  #     - ./.env
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #   ports:
  #     - "5432:5432"
  # # Infrastructure services (same as production)

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    env_file:
      - ./.env
    environment:
      - discovery.type=${ES_DISCOVERY_TYPE}
      - xpack.security.enabled=${ES_XPACK_SECURITY_ENABLED}
      - "ES_JAVA_OPTS=${ES_JAVA_OPTS}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - traefik-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    # image: confluentinc/cp-kafka:latest
    image: confluentinc/cp-kafka:7.4.3
    container_name: kafka
    ports:
      - "9092:9092"
    env_file:
      - ./.env
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true" # Tá»± Äá»ng táº¡o topic náº¿u khÃ´ng tá»n táº¡i
    volumes:
    - kafka_data:/tmp/kraft-combined-logs
    - ./create-topics.sh:/usr/bin/create-topics.sh # Mount script vÃ o container
    entrypoint: ["/bin/bash", "-c", "/etc/confluent/docker/run & /usr/bin/create-topics.sh && wait"]
    networks:
      - traefik-net

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - traefik-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - ./.env
    environment:
      - REDIS_ADDR=${REDIS_ADDR}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
  # Separate Postgres instances per service (no host port mapping to avoid conflicts)
  postgres-auth:
    image: postgres:16
    container_name: postgres-auth
    restart: always
    environment:
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    networks:
      - traefik-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-user:
    image: postgres:16
    container_name: postgres-user
    restart: always
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${USER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${USER_POSTGRES_DB}
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - traefik-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-payment:
    image: postgres:16
    container_name: postgres-payment
    restart: always
    env_file:
      - ./.env
    volumes:
      - postgres_payment_data:/var/lib/postgresql/data
    networks:
      - traefik-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-order:
    image: postgres:16
    container_name: postgres-order
    restart: always
    env_file:
      - ./order-service/.env
    volumes:
      - postgres_order_data:/var/lib/postgresql/data
    networks:
      - traefik-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    env_file:
      - ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres-auth
    networks:
      - traefik-net

volumes:
  redis_data:
  elasticsearch_data:
  postgres_data:
  postgres_auth_data:
  postgres_payment_data:
  postgres_order_data:
  postgres_user_data:

networks:
  traefik-net:
    driver: bridge
